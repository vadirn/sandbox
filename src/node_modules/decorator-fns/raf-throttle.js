/**
 * Runs provided function once per animation frame, passing latest arguments
 * @param {Function} fn
 */
export function rafThrottle(fn) {
  let cachedArgs;
  let frameId;
  let resolve;
  let reject;
  let taskFulfillmentPromise;

  const task = (...args) => {
    cachedArgs = args;
    if (frameId) {
      return taskFulfillmentPromise;
    }

    // taskFulfillmentPromise supposed to be undefined or fulfilled at this point
    taskFulfillmentPromise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });

    frameId = requestAnimationFrame(() => {
      frameId = null;
      try {
        fn(...cachedArgs);
        resolve();
      } catch (err) {
        reject(err);
      }
    });

    return taskFulfillmentPromise;
  };

  task.cancel = () => {
    cancelAnimationFrame(frameId);
    frameId = null;
    resolve?.();
  };

  return task;
}
