/**
 * Runs provided function once per given duration, passing latest arguments
 * @param {Function} fn
 */
export function throttle(fn, duration = 1000) {
  let cachedArgs;
  let timeoutId;
  let resolve;
  let reject;
  let taskFulfillmentPromise;

  const task = (...args) => {
    cachedArgs = args;
    if (timeoutId) {
      return taskFulfillmentPromise;
    }

    taskFulfillmentPromise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });

    timeoutId = setTimeout(() => {
      timeoutId = null;
      try {
        fn(...cachedArgs);
        resolve();
      } catch (err) {
        reject(err);
      }
    }, duration);

    return taskFulfillmentPromise;
  };

  task.cancel = () => {
    clearTimeout(timeoutId);
    timeoutId = null;
    resolve?.();
  };

  return task;
}
