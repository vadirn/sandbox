import { spring } from 'spring';
import { loop } from 'loop';
import { rafThrottle } from 'decorator-fns/raf-throttle';
import { AbortError, assert } from 'errors';

export function scroller(
  node,
  springConfig = { stiffness: 400, damping: 32, mass: 0.5 }
) {
  const delta = spring([0, 0], springConfig);
  const setScrollPosition = rafThrottle(() => {
    const [top, left] = delta.current;

    assert(top !== 0 || left !== 0, new AbortError());

    let scrollTopKey = 'scrollTop';
    let scrollLeftKey = 'scrollLeft';
    if (node === window) {
      scrollTopKey = 'scrollY';
      scrollLeftKey = 'scrollX';
    }

    const scrollLeft = node[scrollLeftKey] + left;
    const scrollTop = node[scrollTopKey] + top;

    node.scrollTo(scrollLeft, scrollTop);

    assert(scrollTop > 0 || scrollLeft > 0, new AbortError());

    if (node === window) {
      assert(
        document.documentElement.offsetHeight + scrollTop <
          document.documentElement.scrollHeight ||
          document.documentElement.offsetWidth + scrollLeft <
            document.documentElement.scrollWidth,
        new AbortError()
      );
    } else {
      assert(
        node.offsetHeight + scrollTop < node.scrollHeight ||
          node.offsetWidth + scrollLeft < node.scrollWidth,
        new AbortError()
      );
    }
  });

  const setScrollPositionLoop = loop(
    setScrollPosition,
    setScrollPosition.cancel
  );

  return {
    set(top = 0, left = 0) {
      delta.set([top, left]);
      setScrollPositionLoop();
    },
    stop() {
      delta.set([0, 0]);
    },
    cancel() {
      delta.set([0, 0], { hard: true });
      setScrollPositionLoop.cancel();
    },
  };
}
