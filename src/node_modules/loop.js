import { AbortError, assert } from 'errors';

export function loop(
  task = Promise.reject(new AbortError()),
  cancelTask = () => {}
) {
  let running = false;
  let currentLoop;
  let cachedArgs;

  const runTasks = async () => {
    try {
      while (running) {
        await task(...cachedArgs);
      }
    } catch (err) {
      assert(err instanceof AbortError, err);
    }
    running = false;
  };

  const returnValue = (...args) => {
    cachedArgs = args;
    if (running === false) {
      running = true;
      currentLoop = runTasks();
    }
    return currentLoop;
  };

  returnValue.cancel = () => {
    running = false;
    cancelTask(task);
  };

  Object.defineProperty(returnValue, 'running', {
    get() {
      return running;
    },
  });

  return returnValue;
}
